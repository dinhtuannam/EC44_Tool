@{
    ViewData["Title"] = "SymAction";
}

<div class="container-fluid mt-4">
    <div class="card shadow">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">SymAction</h5>
        </div>
        <div class="card-body">
            <style>
                /* Subtle hover for rows; distinct from table-warning background */
                #paramTableBody tr:hover {
                    background-color: rgba(13, 110, 253, 0.06); /* light blue tint */
                }
                /* When a warning row (IsReplace=false) is hovered, keep a gentle difference */
                #paramTableBody tr.table-warning:hover {
                    background-color: #ffe8a1; /* slightly deeper than default #fff3cd */
                }
                /* Improve table readability a bit */
                #paramTableBody td, #paramTableBody th { vertical-align: middle; }
            </style>
            <form id="symForm">
                <div class="mb-3">
                    <label for="filePath" class="form-label">File path</label>
                    <input type="text" class="form-control" id="filePath" placeholder="Enter file path">
                </div>
                <div class="mb-3">
                    <label for="methodName" class="form-label">Method name</label>
                    <input type="text" class="form-control" id="methodName" placeholder="Enter method name">
                </div>
                <button type="button" id="runBtn" class="btn btn-primary">Run</button>
            </form>
            <div class="mt-3">
                <h6>Constants</h6>
                <pre id="resultBox" class="bg-light p-3" style="max-height: 40vh; overflow: auto;"></pre>
            </div>
            <div class="mt-3">
                <h6>Method source</h6>
                <pre id="methodBox" class="bg-light p-3" style="max-height: 40vh; overflow: auto;"></pre>
            </div>
            <div class="mt-3">
                <h6>Parameter usages ("?")</h6>
                <table class="table table-bordered table-sm table-hover table-striped align-middle">
                    <thead>
                        <tr>
                            <th style="width:80px">#</th>
                            <th>Text</th>
                            <th>Param</th>
                            <th>Type</th>
                            <th style="width:80px">Check</th>
                            <th style="width:140px">Action</th>
                        </tr>
                    </thead>
                    <tbody id="paramTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
    
</div>

@section Scripts {
    <script>
        $(function(){
            function loadSymSettings(){
                const savedFilePath = localStorage.getItem('sym_filePath');
                const savedMethodName = localStorage.getItem('sym_methodName');
                if (savedFilePath) {
                    $('#filePath').val(savedFilePath);
                }
                if (savedMethodName) {
                    $('#methodName').val(savedMethodName);
                }
            }

            function saveSymSettings(){
                localStorage.setItem('sym_filePath', $('#filePath').val());
                localStorage.setItem('sym_methodName', $('#methodName').val());
            }

            loadSymSettings();

            $('#runBtn').on('click', function(){
                const filePath = $('#filePath').val();
                const methodName = $('#methodName').val();
                saveSymSettings();
                $('#resultBox').text('Processing...');

                $.ajax({
                    url: '@Url.Action("ParseConstants", "SymAction")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ filePath: filePath, methodName: methodName }),
                    success: function(resp){
                        if(resp && resp.success){
                            $('#resultBox').text(JSON.stringify(resp.data, null, 2));
                            $('#methodBox').text(resp.methodSource || '');
                            const tbody = $('#paramTableBody');
                            tbody.empty();
                            if (resp.paramUsages && resp.paramUsages.length){
                                resp.paramUsages.forEach(function(item){
                                    const tr = $('<tr>');
                                    if (item.isReplace === false) {
                                        tr.addClass('table-warning'); // light highlight for non-replaced rows
                                        tr.data('hadWarning', true);
                                    }
                                    tr.append($('<td>').text(item.index));
                                    tr.append($('<td>').text(item.text));
                                    tr.append($('<td>').text(item.param || ''));
                                    tr.append($('<td>').text(item.type || ''));
                                    const checkTd = $('<td>');
                                    const chk = $('<input type="checkbox" class="form-check-input">');
                                    chk.on('change', function(){
                                        if (this.checked) {
                                            tr.removeClass('table-warning').addClass('table-success');
                                        } else {
                                            tr.removeClass('table-success');
                                            if (tr.data('hadWarning')) {
                                                tr.addClass('table-warning');
                                            }
                                        }
                                    });
                                    checkTd.append(chk);
                                    const actionTd = $('<td>');
                                    if (item.isReplace) {
                                        const btn = $('<button type="button" class="btn btn-sm btn-outline-primary">Copy SQL</button>');
                                        btn.on('click', function(){
                                            const m = /<([^>]+)>\.([A-Za-z0-9_]+)/.exec(item.text || '');
                                            if (!m) { return; }

                                            const tableName = m[1];
                                            const columnName = m[2];
                                            const sql = "SELECT owner, object_name, object_type\n" +
                                                        "FROM all_objects\n" +
                                                        "WHERE object_type = 'TABLE'\n" +
                                                        "  AND object_name = '" + tableName + "';\n"+
                                                        "------------------------------------\n" +
                                                        "SELECT owner, table_name, column_name, \n" +
                                                        "       data_type, data_length, nullable \n" +
                                                        "FROM dba_tab_columns \n" +
                                                        "WHERE table_name = '" + tableName + "' \n" +
                                                        "      AND column_name = TRIM('" + columnName + "') \n" +
                                                        "   -- AND owner = TRIM('') \n" +
                                                        "ORDER BY owner, column_id;";

                                            if (navigator.clipboard && navigator.clipboard.writeText) {
                                                navigator.clipboard.writeText(sql).then(function(){
                                                    const el = document.getElementById('symCopyToast');
                                                    if (el) {
                                                        const toast = new bootstrap.Toast(el, { delay: 2000 });
                                                        const body = el.querySelector('.toast-body');
                                                        if (body) { body.textContent = 'SQL copied to clipboard'; }
                                                        toast.show();
                                                    }
                                                }).catch(function(){
                                                    // ignore
                                                });
                                            }
                                        });
                                        actionTd.append(btn);
                                    }
                                    tr.append(checkTd);
                                    tr.append(actionTd);
                                    tbody.append(tr);
                                });
                            }
                        } else {
                            $('#resultBox').text(resp && resp.message ? resp.message : 'Unknown error');
                            $('#methodBox').text('');
                            $('#paramTableBody').empty();
                        }
                    },
                    error: function(){
                        $('#resultBox').text('API call failed');
                    }
                });
            });
        });
    </script>
}

<!-- Toast Notification -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="symCopyToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <strong class="me-auto">Notification</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Copied successfully
        </div>
    </div>
    </div>

