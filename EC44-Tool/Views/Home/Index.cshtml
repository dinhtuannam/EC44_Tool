@{
    ViewData["Title"] = "EC44 Tool";
}

<style>
    .file-details-row {
        display: none;
    }
     .image-paste-area {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        min-height: 100px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }
    .image-paste-area img {
        max-width: 100%;
        max-height: 200px; /* Adjust as needed */
    }
</style>

<div class="container-fluid mt-4">
    <!-- Thiết lập Section -->
    <div class="card shadow mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center" style="cursor: pointer;" id="setupHeader">
            <h5 class="mb-0">Thiết lập</h5>
            <i class="fas fa-chevron-down" id="setupToggle"></i>
        </div>
        <div class="card-body" id="setupBody">
            <form id="setupForm">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="oraclePath" class="form-label">Đường dẫn Oracle</label>
                            <input type="text" class="form-control" id="oraclePath" name="oraclePath" placeholder="Nhập đường dẫn folder Oracle">
                        </div>
                         <div class="mb-3">
                            <label for="postgresPath" class="form-label">Đường dẫn Postgres</label>
                            <input type="text" class="form-control" id="postgresPath" name="postgresPath" placeholder="Nhập đường dẫn folder Postgres">
                        </div>
                         <div class="mb-3">
                            <label for="imagePath" class="form-label">Đường dẫn hình ảnh</label>
                            <input type="text" class="form-control" id="imagePath" name="imagePath" placeholder="Nhập đường dẫn folder hình ảnh">
                        </div>
                    </div>
                     <div class="col-md-6">
                        <div class="mb-3">
                            <label for="nameList" class="form-label">Danh sách tên file</label>
                            <textarea class="form-control" id="nameList" name="nameList" rows="4" placeholder="Nhập danh sách tên file, mỗi tên một dòng"></textarea>
                        </div>
                         <div class="mb-3">
                            <label for="promptTextarea" class="form-label">Prompt</label>
                            <textarea class="form-control" id="promptTextarea" name="promptTextarea" rows="4" placeholder="Nhập prompt ở đây"></textarea>
                        </div>
                    </div>
                </div>
                 <div class="row align-items-center">
                    <div class="col-md-4 offset-md-4">
                         <div class="mb-3">
                            <label for="filter" class="form-label">Lọc theo trạng thái</label>
                            <select class="form-select" id="filter" name="filter">
                                <option value="">Tất cả</option>
                                <option value="Đã làm">Đã làm</option>
                                <option value="Chưa làm">Chưa làm</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <button type="button" class="btn btn-primary w-100" id="showFilesButton">Hiển thị</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Danh sách file Section -->
    <div class="card shadow">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0">Danh sách file</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="fileTable">
                    <thead>
                        <tr>
                            <th>Tên file</th>
                            <th>Trạng thái</th>
                             <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Store file content temporarily
        let fileContentCache = {};

        function toggleSetup() {
            const setupBody = $('#setupBody');
            const toggleIcon = $('#setupToggle');
            
            setupBody.slideToggle(300);
            toggleIcon.toggleClass('fa-chevron-down fa-chevron-up');
        }

        function saveSettings() {
            localStorage.setItem('oraclePath', $('#oraclePath').val());
            localStorage.setItem('postgresPath', $('#postgresPath').val());
            localStorage.setItem('imagePath', $('#imagePath').val());
            localStorage.setItem('nameList', $('#nameList').val());
            localStorage.setItem('filter', $('#filter').val());
             localStorage.setItem('promptTextarea', $('#promptTextarea').val());
        }

        function loadSettings() {
            const savedOraclePath = localStorage.getItem('oraclePath');
            const savedPostgresPath = localStorage.getItem('postgresPath');
            const savedImagePath = localStorage.getItem('imagePath');
            const savedNameList = localStorage.getItem('nameList');
            const savedFilter = localStorage.getItem('filter');
            const savedPromptTextarea = localStorage.getItem('promptTextarea');

            if (savedOraclePath) {
                $('#oraclePath').val(savedOraclePath);
            }
            if (savedPostgresPath) {
                $('#postgresPath').val(savedPostgresPath);
            }
             if (savedImagePath) {
                $('#imagePath').val(savedImagePath);
            }
            if (savedNameList) {
                $('#nameList').val(savedNameList);
            }
            if (savedFilter) {
                $('#filter').val(savedFilter);
            }
             if (savedPromptTextarea !== null) { // Check for null explicitly to allow empty string
                $('#promptTextarea').val(savedPromptTextarea);
            }
        }

        async function renderFileListTable(fileList) {
            const tbodyFileTable = $('#fileTable tbody');
            tbodyFileTable.empty();
            fileContentCache = {}; // Clear cache

            if (fileList && fileList.length > 0) {
                for (const file of fileList) { // Use for...of for async/await inside loop
                    let statusText = '';
                    if (file.status === 0) { // Assuming 0 corresponds to ChuaLam
                        statusText = 'Chưa làm';
                    } else if (file.status === 1) { // Assuming 1 corresponds to DaLam
                        statusText = 'Đã làm';
                    }

                    const statusClass = file.status === 1 ? 'text-success' : 'text-danger';

                    // Main file row
                    tbodyFileTable.append(`
                        <tr data-filename="${file.fileName}">
                            <td>${file.fileName}</td>
                            <td class="file-status ${statusClass}">${statusText}</td>
                            <td>
                                <button class="btn btn-sm btn-secondary copy-content-btn" data-filepath="${file.filePath}">Copy Content</button>
                                <button class="btn btn-sm btn-primary copy-prompt-btn" data-filepath="${file.filePath}">Copy Prompt</button>
                                <button class="btn btn-sm btn-secondary toggle-details-btn">Edit</button>
                            </td>
                        </tr>
                        <tr class="file-details-row" data-filename="${file.fileName}">
                            <td colspan="3">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>Nội dung file Postgres</h6>
                                        <textarea class="form-control postgres-content-textarea" rows="10" data-filename="${file.fileName}"></textarea>
                                    </div>
                                    <div class="col-md-6">
                                         <h6>Paste hình ảnh tại đây</h6>
                                         <div class="image-paste-area" data-filename="${file.fileName}">
                                            Nhấn Ctrl+V để paste hình ảnh
                                         </div>
                                          <button class="btn btn-success btn-sm mt-2 save-file-btn" data-filename="${file.fileName}">Lưu</button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    `);
                }
            } else {
                tbodyFileTable.append(`
                    <tr>
                        <td colspan="3" class="text-center">Không tìm thấy file nào phù hợp.</td>
                    </tr>
                `);
            }
        }

        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                console.log('Text copied to clipboard');
                // Optionally, show a small success message to the user
            } catch (err) {
                console.error('Failed to copy text: ', err);
                 alert('Không thể copy nội dung vào clipboard. Vui lòng kiểm tra quyền truy cập.');
            }
        }

         async function getPostgresFileContent(fileName) {
            const postgresPath = $('#postgresPath').val();
             try {
                const response = await $.ajax({
                    url: '@Url.Action("GetPostgresFileContent", "Home")',
                    type: 'GET',
                    data: { postgresPath: postgresPath, fileName: fileName }
                });
                if (response.success) {
                    return response.content;
                } else {
                    // If file doesn't exist, return empty string, otherwise show error
                     if (response.message && response.message.includes('không tồn tại')){
                          return '';
                     } else {
                         alert('Lỗi khi đọc file Postgres: ' + response.message);
                         return null;
                     }
                }
            } catch (err) {
                 alert('Đã xảy ra lỗi khi gọi API đọc file Postgres.');
                 return null;
            }
        }

        async function saveFileAndImage(fileName, fileContent, imageData) {
             const postgresPath = $('#postgresPath').val();
             const imagePath = $('#imagePath').val();

             try {
                const response = await $.ajax({
                    url: '@Url.Action("SaveFileAndImage", "Home")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                         fileName: fileName,
                         fileContent: fileContent,
                         imageData: imageData,
                         postgresPath: postgresPath,
                         imagePath: imagePath
                    })
                });
                return response; // { success: bool, message: string, newStatus: enum_value }
            } catch (err) {
                 alert('Đã xảy ra lỗi khi gọi API lưu file.');
                 return { success: false, message: 'Lỗi kết nối hoặc server.' };
            }
        }

        async function getFileContent(filePath) {
             try {
                const response = await $.ajax({
                    url: '@Url.Action("GetFileContent", "Home")',
                    type: 'GET',
                    data: { filePath: filePath }
                });
                if (response.success) {
                    return response.content;
                } else {
                    alert('Lỗi khi đọc file Oracle: ' + response.message);
                    return null;
                }
            } catch (err) {
                 alert('Đã xảy ra lỗi khi gọi API đọc file Oracle.');
                 return null;
            }
        }

        function showFiles() {
            const oraclePath = $('#oraclePath').val();
            const postgresPath = $('#postgresPath').val();
            const nameList = $('#nameList').val();

            const filterValue = $('#filter').val();
            let filter = '';
            if (filterValue === 'Đã làm') {
                filter = 'DaLam';
            } else if (filterValue === 'Chưa làm') {
                filter = 'ChuaLam';
            }

            saveSettings();

            $.ajax({
                url: '@Url.Action("GetFileList")',
                type: 'POST',
                data: {
                    oraclePath: oraclePath,
                    postgresPath: postgresPath,
                    nameList: nameList,
                    filter: filter
                },
                success: function(response) {
                    if (response.success) {
                        renderFileListTable(response.data);
                    } else {
                        alert(response.message);
                    }
                },
                error: function() {
                    alert('Có lỗi xảy ra khi xử lý yêu cầu');
                }
            });
        }

        $(document).ready(function() {
            loadSettings();

            $('#setupHeader').on('click', toggleSetup);
            $('#showFilesButton').on('click', showFiles);

            // Event listener for Copy Content buttons (delegated)
            $('#fileTable tbody').on('click', '.copy-content-btn', async function() {
                 const filePath = $(this).data('filepath'); // This is Oracle path
                const fileContent = await getFileContent(filePath); // Use getFileContent for Oracle
                if (fileContent !== null) {
                    copyToClipboard(fileContent);
                }
            });

            // Event listener for Copy Prompt buttons (delegated)
             $('#fileTable tbody').on('click', '.copy-prompt-btn', async function() {
                 const filePath = $(this).data('filepath'); // This is Oracle path
                const prompt = $('#promptTextarea').val();
                const fileContent = await getFileContent(filePath); // Use getFileContent for Oracle
                if (fileContent !== null) {
                    const contentToCopy = prompt + '\n' + fileContent;
                    copyToClipboard(contentToCopy);
                }
            });

            // Event listener for Toggle Details buttons (delegated)
            $('#fileTable tbody').on('click', '.toggle-details-btn', async function() {
                const btn = $(this);
                const row = btn.closest('tr');
                const detailsRow = row.next('.file-details-row');
                const fileName = row.data('filename');
                const textarea = detailsRow.find('.postgres-content-textarea');
                const pasteArea = detailsRow.find('.image-paste-area');

                if (detailsRow.is(':visible')) {
                    // Hide the details row
                    detailsRow.slideUp();
                     btn.text('Edit');
                } else {
                    // Show the details row
                     btn.text('Hide');
                    detailsRow.slideDown(async function() {
                         // Load content only if textarea is empty (first time opening)
                        if (textarea.val() === '') {
                              const fileContent = await getPostgresFileContent(fileName);
                              if (fileContent !== null) {
                                   textarea.val(fileContent);
                              }
                        }
                    });
                }
            });

            // Event listener for Paste Image area (delegated)
            $('#fileTable tbody').on('paste', '.image-paste-area', function(event) {
                 const items = (event.clipboardData || event.originalEvent.clipboardData).items;
                let imageFound = false;
                for (const item of items) {
                    if (item.type.indexOf('image') === 0) {
                        imageFound = true;
                        const blob = item.getAsFile();
                        const reader = new FileReader();
                        reader.onload = function(event){
                            // Store the base64 string in a data attribute or cache
                            const base64data = event.target.result;
                            // You might want to store this base64 string somewhere accessible for the Save button
                            // For simplicity, let's add an img tag to the paste area and store base64 in its data attribute
                            const img = $('<img>').attr('src', base64data).addClass('pasted-image');
                             // Clear previous image
                            $(event.target).empty().append(img);
                            // Store base64 on the image element itself or the paste area div
                            $(event.target).data('base64image', base64data);
                        };
                        reader.readAsDataURL(blob);
                        break;
                    }
                }
                if (!imageFound) {
                     // Optional: Provide feedback if no image was pasted
                     // alert('Không tìm thấy hình ảnh trong clipboard.');
                     $(event.target).html('Không tìm thấy hình ảnh trong clipboard.');
                }
                 // Prevent the default paste behavior (like pasting text into the div)
                 event.preventDefault();
            });

             // Event listener for Save buttons (delegated)
            $('#fileTable tbody').on('click', '.save-file-btn', async function() {
                const btn = $(this);
                const detailsRow = btn.closest('.file-details-row');
                const mainRow = detailsRow.prev('tr');
                const fileName = detailsRow.data('filename');
                const fileContent = detailsRow.find('.postgres-content-textarea').val();
                const imageData = detailsRow.find('.image-paste-area').data('base64image'); // Get base64 data

                 btn.text('Đang lưu...').prop('disabled', true);

                const result = await saveFileAndImage(fileName, fileContent, imageData);

                if (result.success) {
                    alert('Lưu thành công!' + (result.message ? ' ' + result.message : ''));
                    // Update status in the main file table if new status is returned
                    if (result.newStatus !== undefined && result.newStatus !== null) {
                        const statusCell = mainRow.find('.file-status');
                        let newStatusText = '';
                         let statusClass = '';
                        if (result.newStatus === 0) {
                             newStatusText = 'Chưa làm';
                             statusClass = 'text-danger';
                        } else if (result.newStatus === 1) {
                             newStatusText = 'Đã làm';
                             statusClass = 'text-success';
                        }
                         statusCell.text(newStatusText).removeClass('text-success text-danger').addClass(statusClass);
                    }
                     btn.text('Lưu').prop('disabled', false);
                } else {
                    alert('Lưu thất bại: ' + result.message);
                     btn.text('Lưu').prop('disabled', false);
                }
            });

        });
    </script>

    <!-- Keep Merge Modal structure if still needed for other purposes, otherwise remove -->
    @* 
    <div class="modal fade" id="mergeModal" tabindex="-1" aria-labelledby="mergeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="mergeModalLabel">Nội dung kết hợp</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <textarea id="mergeModalBodyTextarea" class="form-control" rows="20"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
     *@
}
